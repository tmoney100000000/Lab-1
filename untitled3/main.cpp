/**
 * Name: Tristan Holup
 * Due Date: Friday, September 27, 2019
 * Description: This program finds all of the generators with the set of mod p, where p is a prime
 * number. A generator is a number where that number raised to each power from 1 to p - 1 and then
 * modded by p generates all of the elements in the set from 1 to p - 1. For help understanding what
 * a generator is, I referenced https://crypto.stanford.edu/pbc/notes/numbertheory/gen.html
 */

#include <iostream>
#include <cmath>
#include <vector>

using namespace std;

//method to check if a number is prime
bool checkPrime(int x) {
    bool isprime = true;
    for (int i = 2; i <= sqrt(x); i++) {
        if (x % i == 0)
            isprime = false;
        if (x == 1)
            isprime = false;
    }
    return isprime;
}

//method to generate a list of generators for a given mod, p, where p is prime.
vector<int> generator(int x) {
    vector<int> generators; //instantiating a vector that will be filled with all the valid generators in mod p
    //the following set of nested for loops tests every integer in mod p to see if it's s a generator
    for (int i = 1; i <= x - 1; i++){ //at first, each value, i, is considered a possible generator
        vector<int> possiblegenerator; //vector of all of the numbers generated by i
        int t = 0;
        for (int j = 1; j <= x - 1; j++){ //j represents each of the powers that j is raised to
            int z = pow(i, j);
            int g = z % x;
            possiblegenerator.push_back(g); //adding each generated number to the possible generators vector
        }
        //this for loop is testing to see if a given i is a generator by seeing if every element in the set
        //from 1 to p - 1 is in the possible generator vector
        for (int k = 1; k <= x - 1; k++){
            if (count(possiblegenerator.begin(), possiblegenerator.end(), k)){
                t++;
            }
        }
        if (t == (x - 1)){ //if t is equal to x - 1, the given i is a generator
            generators.push_back(i); //adding i to the list of generators for a given prime mod, p
        }
    }

    return generators;
}



int main() {
    int p;
    bool flag = true;

    //ensuring the user is entering a prime number
    while (flag) {
        cout<<"Enter a prime number: ";
        cin>>p;
        if (!checkPrime(p)){
            cout<<"You didn't enter a prime number. Try again."<<endl;
        }
        else{
            flag = false;
        }
    }

    //calculating all of the generators for a given mod, p
    vector<int> gens = generator(p);
    //printing all of the generators for a given mod, p
    cout<< "The generator(s) for mod " << p << " are" << endl;
    for (int i = 0; i < gens.size(); i++){
        cout<<gens[i]<<endl;
    }

    return 0;
}